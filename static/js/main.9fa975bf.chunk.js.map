{"version":3,"sources":["img/twitter-verified-badge.svg","posts/posts-header.js","posts/posts-section.js","posts/posts-lables.js","posts/posts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","authorInfo","console","log","className","src","author","photo","alt","name","verifiedAccsvg","nickname","date","content","Section","imgProps","image","Lables","d","Posts","props","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,oD,sJCiC5BC,MA9Bf,SAAgBC,GAEd,OADAC,QAAQC,IAAIF,GAEV,6BACE,yBAAKG,UAAU,eACb,yBAAKA,UAAU,UACb,yBAAKC,IAAKJ,EAAWK,OAAOC,MAAOH,UAAU,MAAMI,IAAI,YAEzD,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,YAAYH,EAAWK,OAAOG,MAC9C,8BACE,yBACEJ,IAAKK,IACLN,UAAU,iBACVI,IAAI,cAGR,0BAAMJ,UAAU,aAAaH,EAAWK,OAAOK,UAC/C,0BAAMP,UAAU,aAAhB,QACA,0BAAMA,UAAU,aAAaH,EAAWW,MACxC,yBAAKR,UAAU,gBAEjB,yBAAKA,UAAU,gBAAgBH,EAAWY,aChBrCC,MARf,SAAiBC,GACf,OACE,6BACE,yBAAKV,IAAKU,EAASC,MAAOZ,UAAU,WAAWI,IAAI,cC2B1CS,MA9Bf,WACE,OACE,yBAAKb,UAAU,cACb,6BACE,yBAAKA,UAAU,UACb,0BAAMc,EAAE,qfAEV,mCAEF,6BACE,yBAAKd,UAAU,UACb,0BAAMc,EAAE,smBAEV,mCAEF,6BACE,yBAAKd,UAAU,UACb,0BAAMc,EAAE,kcAEV,mCAEF,6BACE,yBAAKd,UAAU,UACb,0BAAMc,EAAE,uyBCVHC,MAVf,SAAeC,GACb,OACE,yBAAKhB,UAAU,QACb,kBAAC,EAAD,CAAQE,OAAQc,EAAMd,OAAQO,QAASO,EAAMP,QAASD,KAAMQ,EAAMR,OAClE,kBAAC,EAAD,CAASI,MAAOI,EAAMJ,QACtB,kBAAC,EAAD,QCiBSK,MAlBf,WACE,OACE,6BACE,kBAAC,EAAD,CACEf,OAAQ,CACNG,KAAM,mBACNF,MAXR,6FAYQI,SAAU,eAEZE,QAAQ,kDACRG,MAZN,gGAaMJ,KAAM,iCATV,MCCgBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACT,kBAAC,EAAD,MACEC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.9fa975bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter-verified-badge.96c76035.svg\";","import React from \"react\";\r\nimport verifiedAccsvg from \"../img/twitter-verified-badge.svg\";\r\n\r\nfunction Header(authorInfo) {\r\n  console.log(authorInfo);\r\n  return (\r\n    <div>\r\n      <div className=\"postsHeader\">\r\n        <div className=\"avatar\">\r\n          <img src={authorInfo.author.photo} className=\"img\" alt=\"Avatar\"></img>\r\n        </div>\r\n        <div className=\"postsInfo\">\r\n          <div className=\"personInfo\">\r\n            <span className=\"boldFont\">{authorInfo.author.name}</span>\r\n            <span>\r\n              <img\r\n                src={verifiedAccsvg}\r\n                className=\"verifiedAccSvg\"\r\n                alt=\"verified\"\r\n              ></img>\r\n            </span>\r\n            <span className=\"greyFonts\">{authorInfo.author.nickname}</span>\r\n            <span className=\"greyFonts\">·</span>\r\n            <span className=\"greyFonts\">{authorInfo.date}</span>\r\n            <div className=\"moreButton\"></div>\r\n          </div>\r\n          <div className=\"postsMassage\">{authorInfo.content}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Section(imgProps) {\r\n  return (\r\n    <div>\r\n      <img src={imgProps.image} className=\"postsImg\" alt=\"postIMG\"></img>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nfunction Lables() {\r\n  return (\r\n    <div className=\"arialLable\">\r\n      <div>\r\n        <svg className=\"svgIMG\">\r\n          <path d=\"M14.046 2.242l-4.148-.01h-.002c-4.374 0-7.8 3.427-7.8 7.802 0 4.098 3.186 7.206 7.465 7.37v3.828c0 .108.044.286.12.403.142.225.384.347.632.347.138 0 .277-.038.402-.118.264-.168 6.473-4.14 8.088-5.506 1.902-1.61 3.04-3.97 3.043-6.312v-.017c-.006-4.367-3.43-7.787-7.8-7.788zm3.787 12.972c-1.134.96-4.862 3.405-6.772 4.643V16.67c0-.414-.335-.75-.75-.75h-.396c-3.66 0-6.318-2.476-6.318-5.886 0-3.534 2.768-6.302 6.3-6.302l4.147.01h.002c3.532 0 6.3 2.766 6.302 6.296-.003 1.91-.942 3.844-2.514 5.176z\"></path>\r\n        </svg>\r\n        <p>125</p>\r\n      </div>\r\n      <div>\r\n        <svg className=\"svgIMG\">\r\n          <path d=\"M23.77 15.67c-.292-.293-.767-.293-1.06 0l-2.22 2.22V7.65c0-2.068-1.683-3.75-3.75-3.75h-5.85c-.414 0-.75.336-.75.75s.336.75.75.75h5.85c1.24 0 2.25 1.01 2.25 2.25v10.24l-2.22-2.22c-.293-.293-.768-.293-1.06 0s-.294.768 0 1.06l3.5 3.5c.145.147.337.22.53.22s.383-.072.53-.22l3.5-3.5c.294-.292.294-.767 0-1.06zm-10.66 3.28H7.26c-1.24 0-2.25-1.01-2.25-2.25V6.46l2.22 2.22c.148.147.34.22.532.22s.384-.073.53-.22c.293-.293.293-.768 0-1.06l-3.5-3.5c-.293-.294-.768-.294-1.06 0l-3.5 3.5c-.294.292-.294.767 0 1.06s.767.293 1.06 0l2.22-2.22V16.7c0 2.068 1.683 3.75 3.75 3.75h5.85c.414 0 .75-.336.75-.75s-.337-.75-.75-.75z\"></path>\r\n        </svg>\r\n        <p>125</p>\r\n      </div>\r\n      <div>\r\n        <svg className=\"svgIMG\">\r\n          <path d=\"M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.034 11.596 8.55 11.658 1.518-.062 8.55-5.917 8.55-11.658 0-2.267-1.823-4.255-3.903-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.014-.03-1.425-2.965-3.954-2.965z\"></path>\r\n        </svg>\r\n        <p>125</p>\r\n      </div>\r\n      <div>\r\n        <svg className=\"svgIMG\">\r\n          <path d=\"M18.466 14.928c-1.118 0-2.106.525-2.765 1.328l-6.587-3.358c.066-.27.11-.55.11-.842 0-.287-.042-.562-.106-.83l6.575-3.32c.658.81 1.65 1.34 2.774 1.34 1.978 0 3.586-1.606 3.586-3.58s-1.608-3.58-3.586-3.58-3.586 1.606-3.586 3.58c0 .314.054.614.13.904L8.463 9.876c-.656-.846-1.672-1.4-2.824-1.4-1.98 0-3.588 1.606-3.588 3.58s1.61 3.58 3.587 3.58c1.146 0 2.158-.55 2.815-1.39l6.56 3.343c-.08.294-.135.598-.135.918 0 1.974 1.608 3.58 3.586 3.58s3.586-1.606 3.586-3.58-1.61-3.58-3.586-3.58zm0-11.34c1.15 0 2.086.932 2.086 2.078s-.936 2.08-2.086 2.08-2.086-.934-2.086-2.08.935-2.08 2.086-2.08zM5.64 14.134c-1.15 0-2.088-.933-2.088-2.08s.937-2.08 2.087-2.08 2.085.935 2.085 2.08-.936 2.08-2.086 2.08zm12.826 6.452c-1.15 0-2.086-.933-2.086-2.08s.936-2.08 2.086-2.08 2.086.935 2.086 2.08-.936 2.08-2.086 2.08z\"></path>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lables;\r\n","import React from \"react\";\r\nimport Header from \"./posts-header\";\r\nimport Section from \"./posts-section\";\r\nimport Lables from \"./posts-lables\";\r\n\r\nfunction Posts(props) {\r\n  return (\r\n    <div className=\"post\">\r\n      <Header author={props.author} content={props.content} date={props.date} />\r\n      <Section image={props.image} />\r\n      <Lables />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Posts;\r\n","import React from \"react\";\nimport Posts from \"./posts/posts.js\";\n\nconst ANAKIN_IMAGE =\n  \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\n\nconst RAY_IMAGE =\n  \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nfunction App() {\n  return (\n    <div>\n      <Posts\n        author={{\n          name: \"Anakin Skywalker\",\n          photo: ANAKIN_IMAGE,\n          nickname: \"@dart_vader\",\n        }}\n        content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n        image={RAY_IMAGE}\n        date={\"26 февр.\"}\n      />\n      ;\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App/>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}